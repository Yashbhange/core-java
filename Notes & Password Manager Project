import java.io.*;
import java.util.*;

public class NotesPasswordManager {
    static class Note {
        String title;
        String content;

        Note(String title, String content) {
            this.title = title;
            this.content = content;
        }

        public String toString() {
            return "Title: " + title + "\nContent: " + content;
        }

        public String toFileFormat() {
            return title + "::" + content;
        }

        public static Note fromFileFormat(String line) {
            String[] parts = line.split("::");
            return new Note(parts[0], parts[1]);
        }
    }

    static class PasswordEntry {
        String site;
        String username;
        String encryptedPassword;

        PasswordEntry(String site, String username, String password) {
            this.site = site;
            this.username = username;
            this.encryptedPassword = encrypt(password);
        }

        private String encrypt(String password) {
            return new StringBuilder(password).reverse().toString(); // Simple reverse encryption
        }

        private String decrypt() {
            return new StringBuilder(encryptedPassword).reverse().toString();
        }

        public String toString() {
            return "Site: " + site + "\nUsername: " + username + "\nPassword: " + decrypt();
        }

        public String toFileFormat() {
            return site + "::" + username + "::" + encryptedPassword;
        }

        public static PasswordEntry fromFileFormat(String line) {
            String[] parts = line.split("::");
            PasswordEntry entry = new PasswordEntry(parts[0], parts[1], parts[2]);
            entry.encryptedPassword = parts[2]; // override
            return entry;
        }
    }

    static final String NOTES_FILE = "notes.txt";
    static final String PASSWORDS_FILE = "passwords.txt";

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.println("\n===== Notes and Password Manager =====");
            System.out.println("1. Add Note");
            System.out.println("2. View Notes");
            System.out.println("3. Add Password");
            System.out.println("4. View Passwords");
            System.out.println("5. Exit");
            System.out.print("Choose: ");
            int choice = scanner.nextInt();
            scanner.nextLine();

            try {
                switch (choice) {
                    case 1:
                        System.out.print("Enter note title: ");
                        String title = scanner.nextLine();
                        System.out.print("Enter content: ");
                        String content = scanner.nextLine();
                        addNote(new Note(title, content));
                        System.out.println("Note saved.");
                        break;

                    case 2:
                        List<Note> notes = getAllNotes();
                        if (notes.isEmpty()) {
                            System.out.println("No notes found.");
                        } else {
                            for (Note note : notes) {
                                System.out.println("\n" + note);
                            }
                        }
                        break;

                    case 3:
                        System.out.print("Enter site name: ");
                        String site = scanner.nextLine();
                        System.out.print("Enter username: ");
                        String username = scanner.nextLine();
                        System.out.print("Enter password: ");
                        String password = scanner.nextLine();
                        addPassword(new PasswordEntry(site, username, password));
                        System.out.println("Password saved.");
                        break;

                    case 4:
                        List<PasswordEntry> passwords = getAllPasswords();
                        if (passwords.isEmpty()) {
                            System.out.println("No passwords found.");
                        } else {
                            for (PasswordEntry entry : passwords) {
                                System.out.println("\n" + entry);
                            }
                        }
                        break;

                    case 5:
                        System.out.println("Exiting...");
                        return;

                    default:
                        System.out.println("Invalid choice!");
                }
            } catch (IOException e) {
                System.out.println("Error: " + e.getMessage());
            }
        }
    }

    public static void addNote(Note note) throws IOException {
        BufferedWriter writer = new BufferedWriter(new FileWriter(NOTES_FILE, true));
        writer.write(note.toFileFormat());
        writer.newLine();
        writer.close();
    }

    public static List<Note> getAllNotes() throws IOException {
        List<Note> notes = new ArrayList<>();
        File file = new File(NOTES_FILE);
        if (!file.exists())
            return notes;

        BufferedReader reader = new BufferedReader(new FileReader(file));
        String line;
        while ((line = reader.readLine()) != null) {
            notes.add(Note.fromFileFormat(line));
        }
        reader.close();
        return notes;
    }

    public static void addPassword(PasswordEntry entry) throws IOException {
        BufferedWriter writer = new BufferedWriter(new FileWriter(PASSWORDS_FILE, true));
        writer.write(entry.toFileFormat());
        writer.newLine();
        writer.close();
    }

    public static List<PasswordEntry> getAllPasswords() throws IOException {
        List<PasswordEntry> entries = new ArrayList<>();
        File file = new File(PASSWORDS_FILE);
        if (!file.exists())
            return entries;

        BufferedReader reader = new BufferedReader(new FileReader(file));
        String line;
        while ((line = reader.readLine()) != null) {
            entries.add(PasswordEntry.fromFileFormat(line));
        }
        reader.close();
        return entries;
    }
}
